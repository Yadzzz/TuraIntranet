@page "/pricelist"

@inject PageNavigationService PageNavService
@inject IJSRuntime JS
@inject NavigationManager NavManager
@inject Services.NotificationService NotificationService
@inject VisitorsService VisitorsService
@inject Services.PriceList.PriceListService PriceListService

<PageTitle>Pris Lista</PageTitle>

<link rel="stylesheet" type="text/css" href="plugins/table/datatable/datatables.css">
<link rel="stylesheet" type="text/css" href="plugins/table/datatable/dt-global_style.css">

<div id="content" class="main-content">
    <div class="layout-px-spacing">

        <div class="row layout-top-spacing" id="cancel-row">

            <div class="col-xl-12 col-lg-12 col-sm-12  layout-spacing">
                <div class="widget-content widget-content-area br-6">

                    <br />
                    <center><h5>Prislista</h5></center>
                    <br />

                    <div class="col-md-12">
                        <div class="form-group row">
                            <div class="col-sm-2">
                                <label for="kundnumer">Customer No</label>
                                <input type="text" class="form-control form-control-sm" autocomplete="on" name="kundnummer" id="kundnummer" placeholder="Customer No" @bind="this.customerNo" @bind:event="oninput" @onkeydown="@Enter">
                            </div>

                            <div class="col-sm-2">
                                <label for="vendor">Vendor No</label>
                                <input type="text" class="form-control form-control-sm" name="vendor" id="vendor" placeholder="Vendor" @bind="this.vendorNo" @bind:event="oninput" @onkeydown="@Enter">
                            </div>

                            <div class="col-sm-2">
                                <label for="itemCategoryId">Item Category Code</label>
                                <input type="text" class="form-control form-control-sm" name="itemCategoryId" id="itemCategoryId" placeholder="Item Category Code" @bind="this.itemCategoryCode" @bind:event="oninput" @onkeydown="@Enter">
                            </div>

                            <div class="col-xl-2 col-md-4">
                                <label>Hämta Prislista</label>
                                <button class="btn btn-dark btn-block mb-4 mr-2" @onclick="this.Search">Sök</button>
                            </div>
                        </div>
                    </div>

                    @if (this.priceList != null && this.priceList.Count > 0)
                    {
                        <hr />

                        <div class="col-xl-12 col-md-4">
                            <div class="form-group row">
                                <div class="col-xl-2 col-md-4">
                                    <button class="btn btn-dark btn-block mb-4 mr-2" @onclick="this.DownloadExcel">Spara Excel</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            @if (this.priceList != null && this.priceList.Count > 0)
            {
                <PriceListTableComponent @ref="this.priceListTableComponentRef" PriceList="this.priceList" />
            }

        </div>

    </div>
    <Footer />
</div>

@code {
    private string customerNo = string.Empty;
    private string vendorNo = string.Empty;
    private string itemCategoryCode = string.Empty;
    private bool wildcardVendorSearch = false;
    private List<Data.PriceList.ViewTempPrisListExportSsr>? priceList;

    public PriceListTableComponent? priceListTableComponentRef = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.VisitorsService.IncrementPageVisit();
            this.PageNavService.UpdateActiveSection("");
            this.PageNavService.UpdateActivePage("PriceList");

            //await JS.InvokeVoidAsync("loadDataTableComponent");
        }
    }

    private async Task Search()
    {
        if (this.priceList != null && this.priceList.Count > 0)
        {
            this.priceList = null;
            this.priceListTableComponentRef = null;
        }

        if (string.IsNullOrEmpty(this.customerNo) || string.IsNullOrEmpty(this.vendorNo) || string.IsNullOrEmpty(this.itemCategoryCode))
        {
            await this.NotificationService.AlertError("Fyll i alla kollumner!");
            return;
        }

        if (this.vendorNo == "%%")
        {
            this.wildcardVendorSearch = true;
        }
        else
        {
            this.wildcardVendorSearch = false;
        }

        //if (string.IsNullOrEmpty(this.vendorNo) || this.vendorNo.Contains("%"))
        //{
        //    this.vendorNo = "%%";
        //    this.wildcardVendorSearch = true;
        //}
        //else
        //{
        //    this.wildcardVendorSearch = false;
        //}

        //if (string.IsNullOrEmpty(this.itemCategoryCode) || this.itemCategoryCode.Contains("%"))
        //{
        //    this.itemCategoryCode = "%%";
        //}

        this.priceList = await this.PriceListService.GetPriceList(this.customerNo, this.vendorNo, this.itemCategoryCode);
        this.customerNo = string.Empty;
        this.vendorNo = string.Empty;
        this.itemCategoryCode = string.Empty;
        this.StateHasChanged();

        if (this.priceList != null && this.priceList.Count > 0)
        {
            await this.NotificationService.AlertSuccess("Prislista Hämtad.");
        }
        else
        {
            await this.NotificationService.AlertError("Kunde inte hämta prislista.");
        }
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await this.Search();
        }
    }

    private async Task DownloadExcel()
    {
        if (priceList == null || this.priceList.Count == 0)
        {
            return;
        }

        var row = this.priceList.Where(x => x.Name != null && x.VendorName != null).FirstOrDefault();
        string customer = row != null ? row.Customer : "CUSTOMERNO";
        string customerName = row != null ? row.Name : "CUSTOMER";
        string vendor = this.wildcardVendorSearch ? "%%" : (row != null ? row.VendorNo : "VENDORNO");
        string vendorName = this.wildcardVendorSearch ? "%%" : (row != null && row.VendorName != null ? row.VendorName : "VENDOR");

        using (MemoryStream stream = this.PriceListService.CreateExcelStream(customer, customerName, vendor, vendorName, this.priceList))
        {
            try
            {
                await JS.InvokeAsync<object>(
               "saveFileType",
               (customerName + "-" + vendorName + ".xlsx"),
               Convert.ToBase64String(stream.ToArray()));

                await this.NotificationService.AlertSuccess("Prislista nedladdad.");
            }
            catch (Exception e)
            {
                //User disconnected?
                await this.NotificationService.AlertError("Kunde inte ladda ner prislista.");
            }
        }
    }
}
