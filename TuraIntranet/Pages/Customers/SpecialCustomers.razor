@page "/specialcustomers"

@inject PageNavigationService PageNavService
@inject IJSRuntime JS
@inject NavigationManager NavManager
@inject TuraIntranet.Services.Customers.CustomersService CustomerService
@inject Services.NotificationService NotificationService

<PageTitle>Specialkunder</PageTitle>

<link rel="stylesheet" type="text/css" href="plugins/table/datatable/datatables.css">
<link rel="stylesheet" type="text/css" href="plugins/table/datatable/dt-global_style.css">

<div id="content" class="main-content">
    <div class="layout-px-spacing">

        <div class="row layout-top-spacing" id="cancel-row">

            <div class="col-xl-12 col-lg-12 col-sm-12  layout-spacing">
                <div class="widget-content widget-content-area br-6">

                    <br />
                    <center><h5>Specialkunder</h5></center>
                    <br />

                    @if (this.specialCustomers != null && this.customers != null && this.specialCustomers.Count > 0)
                    {
                        <table id="zero-config" class="table table-striped" style="width:100%">
                            <thead>
                                <tr>
                                    <th>Kundnummer</th>
                                    <th>Företag</th>
                                    @*<th>Uppdaterad</th>*@
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var cust in this.specialCustomers)
                                {
                                    @*var customerData = this.customers[cust.CustomerNumber];*@
                                    var customerData = this.GetCustomer(cust.CustomerNumber);

                                    if (customerData == null)
                                        continue;

                                    <tr>
                                        <td>@cust.CustomerNumber</td>
                                        <td>@customerData.Name</td>
                                        @*<td>NULL</td>*@
                                        <td>
                                            <div class="btn-group">
                                                <button class="btn btn-dark btn-sm" @onclick=@(() => this.ShowSpecialCustomer(cust.CustomerNumber))>Visa</button>
                                            </div>
                                            @* <div class="btn-group">
                                    <button type="button" class="btn btn-dark btn-sm" @onclick=@(() => this.ShowSpecialCustomer(cust.CustomerNumber))>Ändra</button>
                                    <button type="button" class="btn btn-dark btn-sm dropdown-toggle dropdown-toggle-split" id="dropdownMenuReference28" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" data-reference="parent">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down"><polyline points="6 9 12 15 18 9"></polyline></svg>
                                    </button>
                                    <div class="dropdown-menu" aria-labelledby="dropdownMenuReference28">
                                    <a class="dropdown-item" @onclick=@(() => this.OnDelete(cust))>Radera</a>
                                    </div>
                                    </div>*@
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <th>Kundnummer</th>
                                    <th>Företag</th>
                                    @*<th>Uppdaterad</th>*@
                                    <th></th>
                                </tr>
                            </tfoot>
                        </table>
                    }
                    else if (this.isLoading)
                    {
                        <div class="col-xl-2 col-md-4">
                            <div class="spinner-border spinner-border-reverse align-self-center text-dark">Laddar...</div>
                        </div>

                        <br />
                    }
                </div>
            </div>

        </div>

    </div>
    <Footer />
</div>

@code {
    private List<TuraIntranet.Data.Customers.SpecialCustomerModel>? specialCustomers;
    private Dictionary<string, TuraIntranet.Data.Customers.CustomerModel>? customers;

    protected override async Task OnInitializedAsync()
    {
        this.PageNavService.UpdateActiveSection("Kunder");
        this.PageNavService.UpdateActivePage("Specialkunder");

        this.specialCustomers = new();
        this.customers = new();

        await this.LoadCustomerData();
        this.StateHasChanged();
        await JS.InvokeVoidAsync("loadDataTableComponent");
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        this.PageNavService.UpdateActiveSection("Kunder");
    //        this.PageNavService.UpdateActivePage("Specialkunder");

    //        this.specialCustomers = new();
    //        this.customers = new();

    //        await this.LoadCustomerData();
    //        this.StateHasChanged();
    //        await JS.InvokeVoidAsync("loadDataTableComponent");
    //    }
    //}

    private Data.Customers.CustomerModel GetCustomer(string customerNumber)
    {
        if (this.customers.TryGetValue(customerNumber, out Data.Customers.CustomerModel customer))
        {
            return customer;
        }

        return null;
    }

    private async Task LoadCustomerData()
    {
        this.specialCustomers = await this.CustomerService.GetSpecialCustomersAsync();

        if (specialCustomers == null)
        {
            await this.NotificationService.AlertError("[ERROR] Could not get data");
            return;
        }

        this.customers = await this.CustomerService.GetSpecialCustomersData();

        if (this.customers == null)
        {
            await this.NotificationService.AlertError("[ERROR] Could not get data");
            return;
        }

        //foreach (var specialCust in this.specialCustomers)
        //{
        //    var customerData = await this.CustomerService.GetCustomerAsync(specialCust.CustomerNumber);

        //    if (customerData == null)
        //    {
        //        this.specialCustomers.Remove(specialCust);
        //        continue;
        //    }

        //    if(this.customers.ContainsKey(specialCust.CustomerNumber))
        //    {
        //        continue;
        //    }

        //    this.customers.Add(specialCust.CustomerNumber, customerData);
        //}
    }

    private void ShowSpecialCustomer(string customerNumber)
    {
        this.NavManager.NavigateTo("/specialcustomer/" + customerNumber);
    }

    public async Task OnDelete(TuraIntranet.Data.Customers.SpecialCustomerModel specialCustomer)
    {
        specialCustomer.IsDeleted = true;
        await this.CustomerService.UpdateSpecialCustomer(specialCustomer.Id, specialCustomer);
        this.specialCustomers.Remove(specialCustomer);
        this.CustomerService.FlushSpecialCustomers();
        await this.NotificationService.AlertSuccess("Specialkund Inaktiverad.");
        this.StateHasChanged();
    }
}