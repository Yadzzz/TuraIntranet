@page "/customers"

@inject PageNavigationService PageNavService
@inject IJSRuntime JS
@inject NavigationManager NavManager
@inject TuraIntranet.Services.Customers.CustomersService CustomerService
@inject Services.NotificationService NotificationService

<PageTitle>Kunder</PageTitle>

<link rel="stylesheet" type="text/css" href="plugins/table/datatable/datatables.css">
<link rel="stylesheet" type="text/css" href="plugins/table/datatable/dt-global_style.css">

<div id="content" class="main-content">
    <div class="layout-px-spacing">

        <div class="row layout-top-spacing" id="cancel-row">

            <div class="col-xl-12 col-lg-12 col-sm-12  layout-spacing">
                <div class="widget-content widget-content-area br-6">

                    <br />
                    <center><h5>Kunduppgifter</h5></center>
                    <br />

                    <div class="form-group row" style="padding-left:25px;">
                        <div class="col-sm-2">
                            <input type="text" class="form-control form-control-sm" placeholder="Kundnummer" @bind-value=@customerNumber>
                        </div>

                        <div class="col-sm-2">
                            <input type="text" class="form-control form-control-sm" placeholder="Företag" @bind-value=@company>
                        </div>

                        <div class="col-sm-2">
                            <input type="text" class="form-control form-control-sm" placeholder="Postnummer" @bind-value=@postalCode>
                        </div>

                        <div class="col-sm-2">
                            <input type="text" class="form-control form-control-sm" placeholder="Ort" @bind-value=@district>
                        </div>

                        <div class="col-xl-2 col-md-4">
                            <button class="btn btn-dark btn-block mb-4 mr-2" @onclick=@SearchCustomer>Sök</button>
                        </div>
                    </div>
                </div>
            </div>

            @*<div class="col-xl-12 col-lg-12 col-sm-12  layout-spacing">
            <div class="widget-content widget-content-area br-6">

            <table id="zero-config" class="table table-striped" style="width:100%">
            <thead>
            <tr>
            <th>Namn</th>
            <th>Adress</th>
            <th>Postnummer</th>
            <th>Postort</th>
            <th>Telefon</th>
            <th>Kontaktperson</th>
            <th>Butikskedja</th>
            <th>Epost</th>
            </tr>
            </thead>
            <tbody>
            @if (this.customers != null && this.customers.Count > 0)
            {
            foreach (var customer in this.customers)
            {
            <tr>
            <td>@customer.Name</td>
            <td>@customer.Address</td>
            <td>@customer.PostCode</td>
            <td>@customer.TerritoryCode</td>
            <td>@customer.PhoneNo</td>
            <td>@customer.Contact</td>
            <td>@customer.ChainName</td>
            <td>@customer.EMail</td>
            </tr>
            }
            }
            </tbody>
            </table>
            </div>
            </div>*@

            @if (this.customers != null && this.customers.Count > 0)
            {
                <CustomersTableComponent Customers="@this.customers" @ref="this.tableComponentRef" />
            }
        </div>

    </div>
    <Footer />
</div>

@code {
    private string customerNumber = string.Empty;
    private string company = string.Empty;
    private string postalCode = string.Empty;
    private string district = string.Empty;
    private List<TuraIntranet.Data.Customers.CustomerModel> customers;
    private CustomersTableComponent tableComponentRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.PageNavService.UpdateActiveSection("Kunder");
            this.PageNavService.UpdateActivePage("Kunduppgifter");

            //this.customers = new();

            //await JS.InvokeVoidAsync("loadDataTableComponent");
        }
    }

    private async Task SearchCustomer()
    {
        if(this.customers != null && customers.Count > 0)
        {
            this.customers.Clear();
        }

        if (!string.IsNullOrEmpty(this.customerNumber))
        {
            var customer = await this.CustomerService.GetCustomerAsync(customerNumber);

            if (customer != null && !string.IsNullOrEmpty(customer.No))
            {
                //this.customers.Add(customer);
                this.customers = new List<Data.Customers.CustomerModel>()
                {
                    customer
                };

                await this.NotificationService.AlertSuccess("Kund(er) hämtad");
            }
            else
            {
                await this.NotificationService.AlertError("Kunde inte hitta kund [" + this.customerNumber + "]");
            }
        }
        else if (!string.IsNullOrEmpty(this.company))
        {
            var customersData = await this.CustomerService.GetCustomerByNameAsync(company);

            if (customersData != null && customersData.Count > 0)
            {
                this.customers = customersData;

                await this.NotificationService.AlertSuccess("Kund(er) hämtad");
            }
            else
            {
                await this.NotificationService.AlertError("Kunde inte hitta kund [" + this.company + "]");
            }
        }
        else if (!string.IsNullOrEmpty(this.postalCode))
        {
            var customersData = await this.CustomerService.GetCustomerByPostalCodeAsync(postalCode);

            if (customersData != null && customersData.Count > 0)
            {
                this.customers = customersData;

                await this.NotificationService.AlertSuccess("Kund(er) hämtad");
            }
            else
            {
                await this.NotificationService.AlertError("Kunde inte hitta kund [" + this.postalCode + "]");
            }
        }
        else if (!string.IsNullOrEmpty(this.district))
        {
            var customersData = await this.CustomerService.GetCustomerByCityAsync(district);

            if (customersData != null && customersData.Count > 0)
            {
                this.customers = customersData;

                await this.NotificationService.AlertSuccess("Kund(er) hämtad");
            }
            else
            {
                await this.NotificationService.AlertError("Kunde inte hitta kund [" + this.district + "]");
            }
        }
        else
        {
            await this.NotificationService.AlertError("Fyll i en av kollumnerna!");
        }

        this.StateHasChanged();
        if (this.tableComponentRef != null)
        {
            this.tableComponentRef.OnStateChange();
        }
        this.ResetVariables();
        return;
    }

    private void ResetVariables()
    {
        this.customerNumber = string.Empty;
        this.company = string.Empty;
        this.postalCode = string.Empty;
        this.district = string.Empty;
    }
}