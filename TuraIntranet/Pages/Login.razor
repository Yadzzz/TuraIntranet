@using System.DirectoryServices.AccountManagement
@using TuraIntranet.Authentication

<PageTitle>Logga In</PageTitle>

@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

@*<button type="button" @onclick=onLogin>Login</button>*@

<link href="../layouts/vertical-light-menu/css/light/plugins.css" rel="stylesheet" type="text/css" />
<link href="../src/assets/css/light/authentication/auth-cover.css" rel="stylesheet" type="text/css" />

<link href="../layouts/vertical-light-menu/css/dark/plugins.css" rel="stylesheet" type="text/css" />
<link href="../src/assets/css/dark/authentication/auth-cover.css" rel="stylesheet" type="text/css" />

<div class="form">

    <div class="auth-container d-flex">

        <div class="container mx-auto align-self-center">
    
            <div class="row">
    
                <div class="col-6 d-lg-flex d-none h-100 my-auto top-0 start-0 text-center justify-content-center flex-column">
                    <div class="auth-cover-bg-image"></div>
                    <div class="auth-overlay"></div>
                        
                    <div class="auth-cover">
    
                        <div class="position-relative">
    
                            @*<img src="../src/assets/img/auth-cover.svg" alt="auth-img">*@
    
                            <h2 class="mt-5 text-white font-weight-bolder px-2">Tura Intranet</h2>
                            <p class="text-white px-2">Tura Scandinavia AB</p>
                        </div>
                        
                    </div>

                </div>

                <div class="col-xxl-4 col-xl-5 col-lg-5 col-md-8 col-12 d-flex flex-column align-self-center ms-lg-auto me-lg-0 mx-auto">
                    <div class="card">
                        <div class="card-body">
    
                            <div class="row">
                                <div class="col-md-12 mb-3">
                                    
                                    <h2>Sign In</h2>
                                    <p>Enter your email and password to login</p>
                                    
                                </div>
                                <div class="col-md-12">
                                    <div class="mb-3">
                                        <label class="form-label">Username</label>
                                        <input type="text" class="form-control" @bind=@loginModel.Username>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="mb-4">
                                        <label class="form-label">Password</label>
                                        <input type="password" class="form-control" @bind=@loginModel.Password>
                                    </div>
                                </div>
                                
                                <div class="col-12">
                                    <div class="mb-4">
                                        <button class="btn btn-secondary w-100" @onclick=onLogin>SIGN IN</button>
                                    </div>
                                </div>
                                <p>@error</p>
                            </div>
                            
                        </div>
                    </div>
                </div>
                
            </div>
            
        </div>

    </div>

</div>

@code {
    private Models.LoginModel loginModel = new Models.LoginModel();
    string error = "error";

    private async Task onLogin()
    {
        //npack hama
        if (userAccountService.GetByUsername(this.loginModel.Username, this.loginModel.Password, out UserAccount userAccount, out string error))
        {
            if (userAccount == null)
            {
                await js.InvokeVoidAsync("alert", "Invalid Username or Password.");
                this.loginModel.Username = string.Empty;
                this.loginModel.Password = string.Empty;
                this.error = error;

                return;
            }

            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    Username = userAccount.Username,
                    Role = userAccount.Role
                });
        }

        this.StateHasChanged();
    }
}
