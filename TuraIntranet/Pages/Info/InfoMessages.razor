@page "/info"

@inject PageNavigationService PageNavService
@inject IJSRuntime JS
@inject NavigationManager NavManager
@inject TuraIntranet.Services.Info.InfoService InfoService

<PageTitle>Meddelanden</PageTitle>

<link rel="stylesheet" type="text/css" href="plugins/table/datatable/datatables.css">
<link rel="stylesheet" type="text/css" href="plugins/table/datatable/dt-global_style.css">

<div id="content" class="main-content">
    <div class="layout-px-spacing">

        <div class="row layout-top-spacing" id="cancel-row">

            <div class="col-xl-12 col-lg-12 col-sm-12  layout-spacing">
                <div class="widget-content widget-content-area br-6">

                    @*<PopupModalDialogComponent @ref="popupRef" />*@

                    <br />
                    <center><h5>Meddelanden</h5></center>
                    <br />

                    <table id="zero-config" class="table table-striped" style="width:100%">
                        <thead>
                            <tr>
                                <th>Uppdaterad</th>
                                <th>Rubrik</th>
                                <th>Meddelande</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (this.infoMessages != null && this.infoMessages.Count > 0)
                            {
                                foreach (var info in this.infoMessages)
                                {
                                    <tr>
                                        <td>@info.Updated</td>
                                        <td>@info.Header</td>
                                        <td><div style="max-width:100%; white-space:pre-line;">@info.Message</div></td>
                                        <td>
                                            <div class="btn-group">
                                                <button type="button" class="btn btn-dark btn-sm" @onclick=@(() => this.EditInfoMessage(info.Id))>Ändra</button>
                                                <button type="button" class="btn btn-dark btn-sm dropdown-toggle dropdown-toggle-split" id="dropdownMenuReference28" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" data-reference="parent">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down"><polyline points="6 9 12 15 18 9"></polyline></svg>
                                                </button>
                                                <div class="dropdown-menu" aria-labelledby="dropdownMenuReference28">
                                                    <a class="dropdown-item" @onclick=@(() => this.Delete(info))>Radera</a>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

    </div>
    <Footer />
</div>

@code {

    private List<TuraIntranet.Data.Info.InfoMessageModel>? infoMessages;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.PageNavService.UpdateActiveSection("Info");
            this.PageNavService.UpdateActivePage("Info");

            this.infoMessages = await this.InfoService.GetInfoMessagesAsync();
            this.StateHasChanged();
            //await JS.InvokeVoidAsync("loadDataTableComponent");
        }
    }

    private void EditInfoMessage(int id)
    {
        this.NavManager.NavigateTo("/info/" + id.ToString());
    }

    private async Task Delete(TuraIntranet.Data.Info.InfoMessageModel info)
    {
        await this.InfoService.DeleteInfoMessageAsync(info.Id);
        this.infoMessages.Remove(info);
        this.InfoService.Flush();
        this.StateHasChanged();
    }
    
    private void ConfirmEditor()
    {
        // Shows the popup at the center of the screen
        popupRef.Show("Popup body text", "test");
    }
}
