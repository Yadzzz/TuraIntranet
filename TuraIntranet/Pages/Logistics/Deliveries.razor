@page "/inleveranser"

@inject PageNavigationService PageNavService
@inject IJSRuntime JS
@inject NavigationManager NavManager
@inject TuraIntranet.Services.Logistics.ShipmentService ShipmentService

<PageTitle>Intranet - Inleveranser</PageTitle>

<link rel="stylesheet" type="text/css" href="plugins/table/datatable/datatables.css">
<link rel="stylesheet" type="text/css" href="plugins/table/datatable/dt-global_style.css">
<link rel="stylesheet" type="text/css" href="plugins/table/datatable/custom_dt_html5.css">

<div id="content" class="main-content">
    <div class="layout-px-spacing">

        <div class="row layout-top-spacing">

            <div class="col-xl-12 col-lg-12 col-sm-12  layout-spacing">
                <div class="widget-content widget-content-area br-6">

                    <br />
                    <center><h5>Inleveranser</h5></center>
                    <br />

                    @*<div class="col-xl-2 col-md-4">
                    <button class="btn btn-dark btn-block mb-4 mr-2" @onclick=@(() => this.NavManager.NavigateTo("/lagginleverans"))>Lägg till</button>
                    </div>*@

                    <table id="html5-extension" class="table table-hover non-hover" style="width:100%;">
                        <thead>
                            <tr>
                                <th>Ankomst</th>
                                <th>Mottagare</th>
                                <th>Leverantör</th>
                                <th>Ordernr</th>
                                <th>Pall/Kollin</th>
                                <th>Placering</th>
                                <th>Status</th>
                                <th>Uppdaterad</th>
                                <th class="dt-no-sorting"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @*<tr>
                            <td>2022-12-27 11:35:41</td>
                            <td>TURA</td>
                            <td>EPSON</td>
                            <td><div style="max-width:200px; white-space:pre-line;">51625, 51663, 50796, 51090, 51380, 51419, 51625, 51627, 51664</div></td>
                            <td>26 / 0</td>
                            <td>35-40</td>
                            <td>Aktivitet Pågår</td>
                            <td>2022-12-27 12:33:26</td>
                            <td>
                            <div class="btn-group">
                            <button class="btn btn-dark btn-sm" @onclick=@(() => ShowDelivery("id-here"))>Visa</button>
                            </div>
                            </td>
                            </tr>*@

                            @if (this._shipments != null && this._shipments.Count > 0)
                            {
                                foreach (var shipment in this._shipments)
                                {
                                    if (shipment.Shipment.Prioritized.HasValue && shipment.Shipment.Prioritized.Value == true)
                                    {
                                        <tr style="background-color:slategrey;">
                                            <td style="color:black"><div style="max-width:100%; white-space:pre-line;">@shipment.Shipment.ReceivedAt</div></td>
                                            <td style="color:black">@this.ShipmentService.GetShipmentEmployee(shipment.Shipment.ReceivedBy.Value)</td>
                                            <td style="color:black"><div style="max-width:100%; white-space:pre-line;">@shipment.Shipment.Supplier</div></td>
                                            <td style="color:black"><div style="max-width:100%; white-space:pre-line;">@shipment.Shipment.OrderNumbers</div></td>
                                            <td style="color:black">@((shipment.Shipment.NumberOfPallets ?? 0) + " / " + (shipment.Shipment.NumberOfPackages ?? 0))</td>
                                            <td style="color:black">@shipment.Shipment.Placement</td>
                                            <td style="color:black">@this.ShipmentService.GetShipmentStatus(shipment.ShipmentUpdate.StatusId)</td>
                                            <td style="color:black"><div style="max-width:100%; white-space:pre-line;">@shipment.ShipmentUpdate.UpdatedAt</div></td>
                                            <td>
                                                @*<div class="btn-group">
                                    <button class="btn btn-dark btn-sm" @onclick=@(() => ShowDelivery(shipment.Shipment.Id.ToString()))>Visa</button>
                                    </div>*@
                                                <div class="btn-group">
                                                    <button type="button" class="btn btn-dark btn-sm" @onclick=@(() => ShowDelivery(shipment.Shipment.Id.ToString()))>Visa</button>
                                                    <button type="button" class="btn btn-dark btn-sm dropdown-toggle dropdown-toggle-split" id="dropdownMenuReference28" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" data-reference="parent">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down"><polyline points="6 9 12 15 18 9"></polyline></svg>
                                                    </button>
                                                    @*<div class="dropdown-menu" aria-labelledby="dropdownMenuReference28">
                                        <a class="dropdown-item" href="#">Väntar Info</a>
                                        <a class="dropdown-item" href="#">Återställ</a>
                                        <a class="dropdown-item" href="#">Lägg till avvikelse</a>
                                        <div class="dropdown-divider"></div>
                                        <a class="dropdown-item" @onclick=@(() => ShowDelivery(shipment.Shipment.Id.ToString()))>Avsluta</a>
                                        </div>*@
                                                    <div class="dropdown-menu" aria-labelledby="dropdownMenuReference28">
                                                        @if (shipment.Shipment.Prioritized.HasValue && shipment.Shipment.Prioritized.Value)
                                                        {
                                                            <a class="dropdown-item" @onclick=@(() => OnClickPrioritized(shipment))>Ta bort prioritering</a>
                                                        }
                                                        else
                                                        {
                                                            <a class="dropdown-item" @onclick=@(() => OnClickPrioritized(shipment))>Prioritera</a>
                                                        }

                                                        @if (shipment.ShipmentUpdate.StatusId == 2)
                                                        {
                                                            <a class="dropdown-item" @onclick=@(() => this.OnClickUpdateStatusId(shipment, 3))>Väntar Info</a>
                                                            <a class="dropdown-item" @onclick=@(() => this.OnClickUpdateStatusId(shipment, 1))>Återställ</a>
                                                            <a class="dropdown-item" @onclick=@(() => ShowDelivery(shipment.Shipment.Id.ToString()))>Lägg till avvikelse</a>
                                                            <div class="dropdown-divider"></div>
                                                            <a class="dropdown-item" @onclick=@(() => ShowDelivery(shipment.Shipment.Id.ToString()))>Avsluta</a>
                                                        }
                                                        else
                                                        {
                                                            <a class="dropdown-item" @onclick=@(() => this.OnClickUpdateStatusId(shipment, 2))>Påbörja</a>
                                                            <a class="dropdown-item" @onclick=@(() => ShowDelivery(shipment.Shipment.Id.ToString()))>Lägg till avvikelse</a>
                                                        }
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                    else
                                    {
                                        <tr>
                                            <td><div style="max-width:100%; white-space:pre-line;">@shipment.Shipment.ReceivedAt</div></td>
                                            <td>@this.ShipmentService.GetShipmentEmployee(shipment.Shipment.ReceivedBy.Value)</td>
                                            <td><div style="max-width:100%; white-space:pre-line;">@shipment.Shipment.Supplier</div></td>
                                            <td><div style="max-width:100%; white-space:pre-line;">@shipment.Shipment.OrderNumbers</div></td>
                                            <td>@((shipment.Shipment.NumberOfPallets ?? 0) + " / " + (shipment.Shipment.NumberOfPackages ?? 0))</td>
                                            <td>@shipment.Shipment.Placement</td>
                                            <td>@this.ShipmentService.GetShipmentStatus(shipment.ShipmentUpdate.StatusId)</td>
                                            <td><div style="max-width:100%; white-space:pre-line;">@shipment.ShipmentUpdate.UpdatedAt</div></td>
                                            <td>
                                                @*<div class="btn-group">
                                    <button class="btn btn-dark btn-sm" @onclick=@(() => ShowDelivery(shipment.Shipment.Id.ToString()))>Visa</button>
                                    </div>*@
                                                <div class="btn-group">
                                                    <button type="button" class="btn btn-dark btn-sm" @onclick=@(() => ShowDelivery(shipment.Shipment.Id.ToString()))>Visa</button>
                                                    <button type="button" class="btn btn-dark btn-sm dropdown-toggle dropdown-toggle-split" id="dropdownMenuReference28" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" data-reference="parent">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down"><polyline points="6 9 12 15 18 9"></polyline></svg>
                                                    </button>
                                                    <div class="dropdown-menu" aria-labelledby="dropdownMenuReference28">
                                                        @if (shipment.Shipment.Prioritized.HasValue && shipment.Shipment.Prioritized.Value)
                                                        {
                                                            <a class="dropdown-item" @onclick=@(() => OnClickPrioritized(shipment))>Ta bort prioritering</a>
                                                        }
                                                        else
                                                        {
                                                            <a class="dropdown-item" @onclick=@(() => OnClickPrioritized(shipment))>Prioritera</a>
                                                        }

                                                        @if (shipment.ShipmentUpdate.StatusId == 2)
                                                        {
                                                            <a class="dropdown-item" @onclick=@(() => this.OnClickUpdateStatusId(shipment, 3))>Väntar Info</a>
                                                            <a class="dropdown-item" @onclick=@(() => this.OnClickUpdateStatusId(shipment, 1))>Återställ</a>
                                                            <a class="dropdown-item" @onclick=@(() => ShowDelivery(shipment.Shipment.Id.ToString()))>Lägg till avvikelse</a>
                                                            <div class="dropdown-divider"></div>
                                                            <a class="dropdown-item" @onclick=@(() => ShowDelivery(shipment.Shipment.Id.ToString()))>Avsluta</a>
                                                        }
                                                        else
                                                        {
                                                            <a class="dropdown-item" @onclick=@(() => this.OnClickUpdateStatusId(shipment, 2))>Påbörja</a>
                                                            <a class="dropdown-item" @onclick=@(() => ShowDelivery(shipment.Shipment.Id.ToString()))>Lägg till avvikelse</a>
                                                        }
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>

        </div>

    </div>
    <Footer />
</div>

@code {
    private List<TuraIntranet.Data.Logistics.Shipments.ShipmentModel>? _shipments;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.PageNavService.UpdateActiveSection("Logistik");
            this.PageNavService.UpdateActivePage("Inleveranser");

            await this.GetShipments();
            this.StateHasChanged();

            //await JS.InvokeVoidAsync("loadDataTableHtml5Component");
            //await JS.InvokeVoidAsync("OnScrollEvent");
        }
    }

    private void ShowDelivery(string delivery)
    {
        this.NavManager.NavigateTo("/inleverans/" + delivery);
    }

    private async Task GetShipments()
    {
        this._shipments = await this.ShipmentService.GetShipments();
    }

    private void SaveShipment(TuraIntranet.Data.Logistics.Shipments.ShipmentModel shipment, int statusId)
    {
        var shipmentUpdate = new TuraIntranet.Data.Logistics.Shipments.ShipmentUpdateData()
            {
                ShipmentId = shipment.Shipment.Id,
                UpdatedBy = 3,
                UpdatedAt = DateTime.Now,
                StatusId = statusId,
                Note = string.Empty
            };

        this.ShipmentService.UpdateShipment(shipment);
        this.ShipmentService.AddUpdate(shipmentUpdate);

        shipment.ShipmentUpdates.Add(shipmentUpdate);
        //this.ShipmentService.FlushShipments();
        this.StateHasChanged();
    }

    private void OnClickPrioritized(TuraIntranet.Data.Logistics.Shipments.ShipmentModel shipment)
    {
        if (shipment.Shipment.Prioritized.Value)
        {
            shipment.Shipment.Prioritized = false;
        }
        else
        {
            shipment.Shipment.Prioritized = true;
        }

        this.SaveShipment(shipment, shipment.ShipmentUpdate.StatusId);
        this.StateHasChanged();
    }

    private void OnClickUpdateStatusId(TuraIntranet.Data.Logistics.Shipments.ShipmentModel shipment, int statusId)
    {
        var shipmentUpdate = new TuraIntranet.Data.Logistics.Shipments.ShipmentUpdateData()
            {
                ShipmentId = shipment.Shipment.Id,
                UpdatedBy = 3,
                UpdatedAt = DateTime.Now,
                StatusId = statusId,
                Note = string.Empty
            };

        this.ShipmentService.AddUpdate(shipmentUpdate);
        shipment.ShipmentUpdates.Add(shipmentUpdate);
        shipment.ShipmentUpdate = shipmentUpdate;
        this.StateHasChanged();
    }
}
