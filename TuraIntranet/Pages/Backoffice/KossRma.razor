@page "/kossrma"

@inject PageNavigationService PageNavService
@inject IJSRuntime JS
@inject NavigationManager NavManager
@inject TuraIntranet.Services.Backoffice.KossService KossService
@inject Services.EmailService EmailService
@inject Services.LabelService LabelService
@inject Services.NotificationService Notification

<PageTitle>Koss RMA</PageTitle>

<link rel="stylesheet" type="text/css" href="plugins/table/datatable/datatables.css">
<link rel="stylesheet" type="text/css" href="plugins/table/datatable/dt-global_style.css">

<link rel="stylesheet" type="text/css" href="assets/css/elements/alert.css">

<div id="content" class="main-content">
    <div class="layout-px-spacing">

        <div class="row layout-top-spacing" id="cancel-row">

            <div class="col-xl-12 col-lg-12 col-sm-12  layout-spacing">
                <div class="widget-content widget-content-area br-6">

                    <br />
                    <center><h5>Koss RMA</h5></center>
                    <br />

                    <div class="form-group row" style="padding-left:25px;">
                        <div class="col-sm-2">
                            <input type="text" class="form-control form-control-sm" placeholder="Sök" @bind-value=@searchText>
                        </div>

                        <div class="col-sm-2">
                            <select name="nät" class="form-control country_code  form-control-sm" @onchange=@OnChangeCountry>
                                <option value="">Alla</option>
                                <option value="sv">Sverige</option>
                                <option value="dk">Danmark</option>
                                <option value="no">Norge</option>
                                <option value="fi">Finland</option>
                            </select>
                        </div>

                        <div class="col-sm-2">
                            <div class="custom-control custom-checkbox checkbox-info">
                                <input type="checkbox" class="custom-control-input" id="sChkbox" @onclick=@OnClickShowFinished>
                                <label class="custom-control-label" for="sChkbox">Visa Slutförda</label>
                            </div>
                        </div>

                        <div class="col-xl-2 col-md-4">
                            <button class="btn btn-dark btn-block mb-4 mr-2" @onclick=@Search>Sök</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-8 col-lg-12 col-sm-12  layout-spacing">
                <div class="widget-content widget-content-area br-6">
                    @if (this.filteredKossRmas != null && this.filteredKossRmas.Count > 0)
                    {
                        <table id="zero-config" class="table table-striped" style="width:100%">
                            <thead>
                                <tr>
                                    <th>Namn</th>
                                    <th>Address</th>
                                    <th>Postnr</th>
                                    <th>Ort</th>
                                    <th>Datum</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var koss in this.filteredKossRmas)
                                {
                                    <tr @onclick=@(() => this.Select(koss))>
                                        <td style="@(this.selectedKossRma != null && this.selectedKossRma.Id == koss.Id ? "background-color:slategrey;" : "")">
                                            <div style="max-width:100%; white-space:pre-line;">
                                                @(
                                                    koss.FirstName + " " + koss.LastName
                                                    )
                                            </div>
                                        </td>
                                        <td style="@(this.selectedKossRma != null && this.selectedKossRma.Id == koss.Id ? "background-color:slategrey;" : "")"><div style="max-width:100%; white-space:pre-line;">@koss.StreetAddress</div></td>
                                        <td style="@(this.selectedKossRma != null && this.selectedKossRma.Id == koss.Id ? "background-color:slategrey;" : "")"><div style="max-width:100%; white-space:pre-line;">@koss.Zipcode</div></td>
                                        <td style="@(this.selectedKossRma != null && this.selectedKossRma.Id == koss.Id ? "background-color:slategrey;" : "")"><div style="max-width:100%; white-space:pre-line;">@koss.City</div></td>
                                        <td style="@(this.selectedKossRma != null && this.selectedKossRma.Id == koss.Id ? "background-color:slategrey;" : "")"><div style="max-width:100%; white-space:pre-line;">@koss.Date</div></td>
                                        <td style="@(this.selectedKossRma != null && this.selectedKossRma.Id == koss.Id ? "background-color:slategrey;" : "")">
                                            <div class="btn-group">
                                                <button type="button" class="btn btn-dark btn-sm" @onclick=@(() => this.ViewRma(koss.Id))>Ändra</button>
                                                <button type="button" class="btn btn-dark btn-sm dropdown-toggle dropdown-toggle-split" id="dropdownMenuReference28" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" data-reference="parent">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down"><polyline points="6 9 12 15 18 9"></polyline></svg>
                                                </button>
                                                <div class="dropdown-menu" aria-labelledby="dropdownMenuReference28">
                                                    <a class="dropdown-item" @onclick=@(async () => await this.Print(koss))>Skriv ut</a>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else if (this.kossRmas != null && this.kossRmas.Count > 0)
                    {
                        <p>---</p>
                    }
                    else if (this.isLoading)
                    {
                        <br />

                        <center>
                            <div class="col-xl-2 col-md-4">
                                <div class="spinner-border spinner-border-reverse align-self-center text-dark">Laddar...</div>
                            </div>
                        </center>

                        <br />
                    }
                </div>
            </div>

            @if (this.selectedKossRma != null)
            {
                <div class="col-xl-4 col-lg-12 col-sm-12  layout-spacing">
                    <div class="widget-content widget-content-area br-6">

                        <br />
                        <center><h5>@(this.GetModelName(this.selectedKossRma.KossModelId))</h5></center>
                        <br />

                        @if (this.selectedKossRma.ReplyDate != null)
                        {
                            <div class="alert alert-light-warning border-0 mb-2" role="alert">
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><svg> ... </svg></button>
                                <strong>Besvarad</strong>
                            </div>
                            <br />
                        }

                        <div class="form-group row" style="padding-left:25px;">
                            <div class="col-sm-11">
                                <label class="col-sm-3 col-form-label col-form-label-sm">Inköpsställe</label>
                                <input type="text" class="form-control form-control-sm" value="@this.selectedKossRma.Vendor" disabled>
                            </div>

                            <div class="col-sm-11">
                                <label class="col-sm-3 col-form-label col-form-label-sm">Kvittonummer</label>
                                <input type="text" class="form-control form-control-sm" value="@this.selectedKossRma.Receipt" disabled>
                            </div>

                            <div class="col-sm-11">
                                <label class="col-sm-3 col-form-label col-form-label-sm">Felbeskrivning</label>
                                <textarea class="form-control" value="@this.selectedKossRma.ProblemDescription" rows="7" disabled />
                            </div>

                        </div>

                        <div class="form-group row" style="padding-left:25px;">
                            <div class="col-sm-11">
                                <select name="nät" class="form-control country_code  form-control-sm" @onchange=@OnchangeResponseMessage>
                                    @if (this.selectedKossRma.Country == "sv")
                                    {
                                        <option value="0">Välj Svar</option>
                                        <option value="1">Felaktigt Kvitto</option>
                                        <option value="2">Godkänd</option>
                                        <option value="3">Skicka In</option>
                                        <option value="6">Fritext</option>
                                    }
                                    else if (this.selectedKossRma.Country == "no")
                                    {
                                        <option value="0">Välj Svar</option>
                                        <option value="5">Godkjend</option>
                                        <option value="6">Fritext</option>
                                    }
                                    else if (this.selectedKossRma.Country == "dk")
                                    {
                                        <option value="0">Välj Svar</option>
                                        <option value="4">Godkänt</option>
                                        <option value="6">Fritext</option>
                                    }
                                    else
                                    {
                                        <option value="0">Välj Svar</option>
                                        <option value="6">Fritext</option>
                                    }
                                </select>
                            </div>
                        </div>

                        <div class="form-group row" style="padding-left:25px;">
                            @if (this.showResponseField)
                            {
                                <div class="col-sm-11">
                                    @*<label class="col-sm-3 col-form-label col-form-label-sm">Felbeskrivning</label>*@
                                    <textarea class="form-control" @bind=@(this.responseMessage) rows="10" />
                                </div>
                            }
                        </div>

                        <div class="form-group row" style="padding-left:25px;">

                            <div class="col-xl-5 col-md-4">
                                <button class="btn btn-dark btn-block mb-4 mr-2" @onclick=@SendEmail>Skicka</button>
                                @*<button class="btn btn-dark btn-block mb-4 mr-2">Klarmarkera</button>*@
                            </div>
                            <div class="col-xl-5 col-md-4">
                                <button class="btn btn-dark btn-block mb-4 mr-2" @onclick=@Finish>Klarmarkera</button>
                            </div>
                        </div>

                    </div>

                    @if (!string.IsNullOrEmpty(this.selectedKossRma.CustomReply) && this.selectedKossRma.ReplyDate != null && this.selectedKossRma.ReplyMessageId != null)
                    {
                        <br />

                        <div class="widget-content widget-content-area br-6">
                            <br />
                            <center><h5>Reply Data</h5></center>

                            <div class="form-group row" style="padding-left:25px;">
                                <div class="col-sm-11">
                                    <label class="col-sm-5 col-form-label col-form-label-sm">Reply Date</label>
                                    <input type="text" class="form-control form-control-sm" value="@this.selectedKossRma.ReplyDate" disabled>
                                </div>

                                <div class="col-sm-11">
                                    <label class="col-sm-5 col-form-label col-form-label-sm">Reply Id</label>
                                    <input type="text" class="form-control form-control-sm" value="@this.selectedKossRma.ReplyMessageId" disabled>
                                </div>

                                <div class="col-sm-11">
                                    <label class="col-sm-5 col-form-label col-form-label-sm">Reply Text</label>
                                    <textarea class="form-control" value="@this.selectedKossRma.CustomReply" rows="7" disabled />
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }

        </div>
    </div>
    <Footer />
</div>

@code {
    private List<Data.Backoffice.Koss.KossHeadphoneModel> models;
    private List<Data.Backoffice.Koss.KossRma> kossRmas;
    private List<Data.Backoffice.Koss.KossRma> filteredKossRmas;
    private Data.Backoffice.Koss.KossRma selectedKossRma;

    private string searchText = string.Empty;
    private string searchCountry = "";
    private bool showFinished = false;

    private Dictionary<string, string> responseMessages;
    private bool showResponseField = false;
    private string responseMessage = string.Empty;
    private string selectedResponseId = string.Empty;

    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.PageNavService.UpdateActiveSection("Backoffice");
            this.PageNavService.UpdateActivePage("KossRMA");

            this.LoadResponses();
            this.models = await this.KossService.GetKossModelsAsync();
            this.kossRmas = await this.KossService.GetKossRmasAsync();
            this.Search();
            this.isLoading = false;
            this.StateHasChanged();
            //await JS.InvokeVoidAsync("loadDataTableComponent");
        }
    }

    private void Search()
    {
        if (this.filteredKossRmas != null && this.filteredKossRmas.Count > 0)
            this.filteredKossRmas.Clear();

        List<Data.Backoffice.Koss.KossRma> filtered = new();

        if (this.kossRmas == null || this.kossRmas.Count == 0)
        {
            return;
        }

        if (!string.IsNullOrEmpty(this.searchText))
        {
            var filter = this.kossRmas.Where(x => this.showFinished ? true : x.Finished == false).Where(x => x.FirstName.ToLower().Contains(this.searchText.ToLower()) || x.LastName.ToLower().Contains(this.searchText.ToLower()) ||
                                                 x.StreetAddress.ToLower().Contains(this.searchText.ToLower()) || x.City.ToLower().Contains(this.searchText.ToLower()))
                                                    .ToList().Where(x => (string.IsNullOrEmpty(this.searchCountry) ? true : x.Country.Contains(this.searchCountry))).ToList();

            if (filter != null && filter.Count > 0)
            {
                var byFilter = filter.ConvertAll(x => new Data.Backoffice.Koss.KossRma
                    {
                        Id = x.Id,
                        KossModelId = x.KossModelId,
                        ProblemDescription = x.ProblemDescription,
                        Vendor = x.Vendor,
                        FirstName = x.FirstName,
                        LastName = x.LastName,
                        CoAddress = x.CoAddress,
                        StreetAddress = x.StreetAddress,
                        Zipcode = x.Zipcode,
                        City = x.City,
                        Phone = x.Phone,
                        Email = x.Email,
                        Date = x.Date,
                        Finished = x.Finished,
                        Receipt = x.Receipt,
                        CustomReply = x.CustomReply,
                        ReplyMessageId = x.ReplyMessageId,
                        ReplyDate = x.ReplyDate,
                        Country = x.Country
                    });

                filtered.AddRange(byFilter);
            }
        }
        else
        {
            var all = this.kossRmas.Where(x => this.showFinished ? true : x.Finished == false).Where(x => (string.IsNullOrEmpty(this.searchCountry) ? true : x.Country.Contains(this.searchCountry))).ToList().ConvertAll(x => new Data.Backoffice.Koss.KossRma
                {
                    Id = x.Id,
                    KossModelId = x.KossModelId,
                    ProblemDescription = x.ProblemDescription,
                    Vendor = x.Vendor,
                    FirstName = x.FirstName,
                    LastName = x.LastName,
                    CoAddress = x.CoAddress,
                    StreetAddress = x.StreetAddress,
                    Zipcode = x.Zipcode,
                    City = x.City,
                    Phone = x.Phone,
                    Email = x.Email,
                    Date = x.Date,
                    Finished = x.Finished,
                    Receipt = x.Receipt,
                    CustomReply = x.CustomReply,
                    ReplyMessageId = x.ReplyMessageId,
                    ReplyDate = x.ReplyDate,
                    Country = x.Country
                });

            filtered.AddRange(all);
        }

        this.filteredKossRmas = filtered;
        this.StateHasChanged();
    }

    private void OnChangeCountry(ChangeEventArgs e)
    {
        this.searchCountry = e.Value.ToString();
    }

    private async Task Finish()
    {
        this.selectedKossRma.Finished = true;
        bool success = await this.KossService.UpdateKossModelAsync(this.selectedKossRma);

        if (success)
        {
            if (this.filteredKossRmas.Contains(this.selectedKossRma))
            {
                this.filteredKossRmas.Remove(this.selectedKossRma);
            }

            if (this.kossRmas.Contains(this.selectedKossRma))
            {
                this.kossRmas.Remove(this.selectedKossRma);
            }

            this.selectedKossRma = null;
            this.KossService.Flush();
            this.kossRmas = await this.KossService.GetKossRmasAsync();

            await this.Notification.AlertSuccess("RMA Uppdaterad");
        }
        else
        {
            await this.Notification.AlertError("Kunde inte uppdatera RMA");
        }
    }

    private void OnchangeResponseMessage(ChangeEventArgs e)
    {
        var input = e.Value.ToString();
        this.selectedResponseId = input;

        if (input == "1" || input == "2" || input == "3" || input == "4" || input == "5")
        {
            if (this.responseMessages.TryGetValue(input, out string message))
            {
                message = message.Replace("[name]", this.selectedKossRma.FirstName);
                //if (!string.IsNullOrEmpty(this.selectedKossRma.CoAddress))
                //    message = message.Replace("Hägnadsgatan 21 A", this.selectedKossRma.StreetAddress + "\n" + this.selectedKossRma.CoAddress);
                //else
                message = message.Replace("Hägnadsgatan 21 A", this.selectedKossRma.StreetAddress);
                message = message.Replace("54166", this.selectedKossRma.Zipcode);
                message = message.Replace("Skövde", this.selectedKossRma.City);
                this.responseMessage = message;
            }

            this.showResponseField = true;
        }
        else if (input == "6")
        {
            this.responseMessage = string.Empty;
            this.showResponseField = true;
        }
        else
        {
            this.responseMessage = string.Empty;
            this.showResponseField = false;
        }

        this.StateHasChanged();
    }

    private void OnchangeResponseMessageForce(string input)
    {
        if (input == "1" || input == "2" || input == "3" || input == "4" || input == "5")
        {
            if (this.responseMessages.TryGetValue(input, out string message))
            {
                message = message.Replace("[name]", this.selectedKossRma.FirstName);
                //if (!string.IsNullOrEmpty(this.selectedKossRma.CoAddress))
                //    message = message.Replace("Hägnadsgatan 21 A", this.selectedKossRma.StreetAddress + "\n" + this.selectedKossRma.CoAddress);
                //else
                message = message.Replace("Hägnadsgatan 21 A", this.selectedKossRma.StreetAddress);
                message = message.Replace("54166", this.selectedKossRma.Zipcode);
                message = message.Replace("Skövde", this.selectedKossRma.City);
                this.responseMessage = message;
            }

            this.showResponseField = true;
        }
        else if (input == "6")
        {
            this.responseMessage = string.Empty;
            this.showResponseField = true;
        }
        else
        {
            this.responseMessage = string.Empty;
            this.showResponseField = false;
        }

        this.StateHasChanged();
    }

    private void Select(Data.Backoffice.Koss.KossRma koss)
    {
        //this.responseMessage = string.Empty;
        //this.showResponseField = false;
        this.selectedKossRma = koss;
        this.OnchangeResponseMessageForce(this.selectedResponseId);
        this.StateHasChanged();
        this.JS.InvokeVoidAsync("OnScrollEvent");
    }

    private async Task SendEmail()
    {
        var success = this.EmailService.SendEmail(this.selectedKossRma, this.responseMessage, false);

        if (success)
        {
            this.selectedKossRma.ReplyMessageId = int.Parse(this.selectedResponseId);
            this.selectedKossRma.CustomReply = this.responseMessage;
            this.selectedKossRma.ReplyDate = DateTime.Now;

            await this.KossService.UpdateKossModelAsync(this.selectedKossRma);

            await this.Notification.AlertSuccess("Email Skickad");
        }
        else
        {
            await this.Notification.AlertError("Email kunde ej skickas");
        }
    }

    private void ViewRma(int id)
    {
        this.NavManager.NavigateTo(("/kossrmaview/" + id), false);
    }

    private string GetModelName(int id)
    {
        if (this.models == null)
            return "";

        var model = this.models.Where(x => x.Id == id).FirstOrDefault();

        if (model == null || model.Name == null)
            return "";

        return model.Name;
    }

    private async Task Print(Data.Backoffice.Koss.KossRma rma)
    {
        try
        {
            byte[] bytes = this.LabelService.GenerateLablel(rma, this.GetModelName(rma.KossModelId));
            if (bytes != null)
            {
                //byte[]? decompressed = TuraIntranet.Data.Backoffice.PdfCollector.Decompressor.Decompress(bytes);
                await this.JS.InvokeVoidAsync("SavePdfFile", ("Label.pdf"), Convert.ToBase64String(bytes));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private void OnClickShowFinished()
    {
        if (this.showFinished)
        {
            this.showFinished = false;
        }
        else
        {
            this.showFinished = true;
        }
    }

    private void LoadResponses()
    {
        this.responseMessages = new()
            {
              {"1", @"Hej [name]!

Tyvärr är ditt kvittonummer felaktigt/ofullständigt.



Vänligen skicka en bild på ditt kvitto/order/kontoutdrag.



My Portapro" },

                              {"2", @"Hej [name]!

Vi har tagit emot och godkänner din reklamation. Utbyteskitet kommer att skickas till nedan angivna adress


Hägnadsgatan 21 A
54166  Skövde

Är du osäker på hur du ska gå tillväga vid byte, titta på filmen på www.koss.se

Med vänlig hälsning

My Portapro" },

                              {"3", @"Hej [name]!

Vid denna typ av skada / saknat kvittonr, skall hörlurarna skickas in till oss.

Tura Scandinavia AB
My Porta Pro
Energigatan 15 B
434 37 Kungsbacka

Med vänlig hälsning

My Porta Pro" },
                              {"5", @"Hei [name]!



Vi har mottatt din reklamasjon og godkjenner denne. De nødvendige erstatningsdelene vil bli sendt til den adressen du har oppgitt. Er du usikker på hvordan du bytter elementsettet anbefaler vi deg å gå inn på www.myportapro.com hvor det ligger en instruksjonsvideo.



Med vennlig hilsen



Koss support

Tura Scandinavia
" },
                            {"4", @"Hej [name]!



Vi har modtaget din ansøgning og godkendt din reklamation.

Et reparationskit bliver sendt til den adresse du har oplyst.

Er du usikker på hvordan du monterer højttalerne,

anbefaler vi dig at se filmen på www.myportapro.com



Med venlig hilsen


My Portapro

Vi vil så gerne have dig som medlem på facebook
Søg på Koss Danmark"}
            };
    }
}
