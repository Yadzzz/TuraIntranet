@inherits LayoutComponentBase

@inject IJSRuntime jsRuntime
@inject TuraIntranet.Services.PageNavigationService NavService
@inject PageNavigationService PageNav
@inject DeviceDetectionService DeviceService

<PageTitle>TuraIntranet</PageTitle>

<AuthorizeView Roles="User,Administrator">
    <Authorized>

        <Navbar />

        <!--  BEGIN NAVBAR  -->
        <div class="sub-header-container">
            <header class="header navbar navbar-expand-sm">
                <a @onclick=@this.OnSidebarToogle class="sidebarCollapse" data-placement="bottom"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-menu"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg></a>

                <ul class="navbar-nav flex-row">
                    <li>
                        <div class="page-header">
                            <div class="page-title">
                                @*<h3> Page Title</h3>*@
                            </div>
                        </div>
                    </li>
                </ul>
            </header>
        </div>

        <!--  END NAVBAR  -->
        <!--  BEGIN MAIN CONTAINER  -->
        <div class="main-container sbar-@this.sideBarStatus" id="container" @onclick=@CheckClick>

            <div class="overlay"></div>
            <div class="search-overlay"></div>

            <Sidebar />

            @Body

        </div>
        <!-- END MAIN CONTAINER -->

    </Authorized>
    <NotAuthorized>

        <TuraIntranet.Pages.Login />

    </NotAuthorized>
</AuthorizeView>

@code {
    private string sideBarStatus = "closed";
    private string currentPage = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await this.DeviceService.FindResponsiveness();
        }

        if(currentPage != this.PageNav.ActivePage)
        {
            this.ForceCloseSidebar();
        }

        this.currentPage = this.PageNav.ActivePage;

        //var module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "/layouts/vertical-light-menu/loader.js");
        //await module.InvokeVoidAsync("load");
        //this.StateHasChanged();
    }

    private void OnSidebarToogle()
    {
        if (this.sideBarStatus == "closed")
        {
            this.sideBarStatus = "open";
        }
        else
        {
            this.sideBarStatus = "closed";
        }

        this.StateHasChanged();
    }

    private async Task CheckClick()
    {
        var objRef = DotNetObjectReference.Create(this);
        await jsRuntime.InvokeVoidAsync("onPageClick1", objRef);

        //await this.jsRuntime.InvokeVoidAsync("onPageClick");
    }

    [JSInvokableAttribute("ForceCloseSidebar")]
    public void ForceCloseSidebar()
    {
        this.sideBarStatus = "closed";
        this.StateHasChanged();
    }

    public async Task Test()
    {
        await this.jsRuntime.InvokeVoidAsync("sidebarCollapse");
    }
}